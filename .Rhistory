X <- train.set
## merge team 2 seeds
train.set <- merge(train.set, seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
train.set$seed2 <- train.set$seed
train.set$nseed2 <- train.set$nseed
## remove unused variables
train.set$seed <- NULL
train.set$nseed <- NULL
train.set$seed1.lower <- ifelse(train.set$nseed1 < train.set$nseed2, 1, 0)
save(train.set, file = 'data/working/train_set.RData')
###############################################################################
## Add features to testing dataset
###############################################################################
## load test data
load('data/working/test_set.RData')
## Add team 1 seeds and upset indicator variable
test.set <- merge(test.set, seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
test.set$seed1 <- test.set$seed
test.set$nseed1 <- test.set$nseed
## delete unused variables
test.set$seed <- NULL
test.set$nseed <- NULL
## Add team 2 seeds and upset indicator variable
test.set <- merge(test.set, seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
test.set$seed2 <- test.set$seed
test.set$nseed2 <- test.set$nseed
## delete unused variables
test.set$seed <- NULL
test.set$nseed <- NULL
## create indicator for team 1 being lower seeded (i.e., better ranked) than team 2
test.set$seed1.lower <- ifelse(test.set$nseed1 < test.set$nseed2, 1, 0)
## rank teams by teamid
test.set <- test.set[order(test.set$id), ]
## save testing set data
save(test.set, file = 'data/working/test_set.RData')
## Regular season win-loss record
source('code/reg-season-win-probability.R')
###############################################################################
## NCAA strength of schedule (SoS) rankings
load('data/working/ncaa_sos.RData')
# ncaa.sos data frame
## Add to test set
#load("data/working/test_set.RData")
## Team 1 SOS
test.set <- merge(test.set, ncaa.sos, by.x = c('season', 'team1'), by.y = c('season', 'teamid'), all.x = TRUE)
test.set$sos.rank1 <- test.set$sos.rank
## delete unused variables
test.set$sos.rank <- NULL
test.set$record <- NULL
test.set$teamname <- NULL
## Team 2 SOS
test.set <- merge(test.set, ncaa.sos, by.x = c('season', 'team2'), by.y = c('season', 'teamid'), all.x = TRUE)
test.set$sos.rank2 <- test.set$sos.rank
## delete unused variables
test.set$sos.rank <- NULL
test.set$record <- NULL
test.set$teamname <- NULL
save(test.set, file="data/working/test_set.RData")
## Add to training set
#load("data/working/train_set.RData")
train.set <- merge(train.set, ncaa.sos, by.x = c('season', 'team1'), by.y = c('season', 'teamid'), all.x = TRUE)
train.set$sos.rank1 <- train.set$sos.rank
## delete unused variables
train.set$sos.rank <- NULL
train.set$record <- NULL
train.set$teamname <- NULL
## Team 2 SOS
train.set <- merge(train.set, ncaa.sos, by.x = c('season', 'team2'), by.y = c('season', 'teamid'), all.x = TRUE)
train.set$sos.rank2 <- train.set$sos.rank
## delete unused variables
train.set$sos.rank <- NULL
train.set$record <- NULL
train.set$teamname <- NULL
save(train.set, file="data/working/train_set.RData")
###############################################################################
## Scoring statistics
load("data/working/train_set.RData")
load("data/working/test_set.RData")
load("data/working/scoring_stats.RData")
train.set <- merge(train.set, ppg, by.x = c("season", "team1"), by.y = c("season", "teamid"), all.x = TRUE)
test.set <- merge(test.set, ppg, by.x = c("season", "team1"), by.y = c("season", "teamid"), all.x = TRUE)
save(test.set, file="data/working/test_set.RData")
save(train.set, file="data/working/train_set.RData")
## Reginald Edwards
## CREATED: 01 March 2018
## MODIFIED: 09 March 2018
## DESCRIPTION: Prepare data for modeling. Some datasets have to be created at
## many points in the project, this script generates these datasets up front.
###############################################################################
rm(list=ls())
gc()
## load actual Tournament compact results
compact.results <- read.csv('data/raw/NCAATourneyCompactResults.csv',
stringsAsFactors = FALSE)
names(compact.results) <- tolower(names(compact.results))
## transform actual results table into one comparable to the submissions table
compact.results$id <- ifelse(compact.results$wteamid < compact.results$lteamid,
paste(compact.results$season, compact.results$wteamid,
compact.results$lteamid, sep = '_'),
paste(compact.results$season, compact.results$lteamid,
compact.results$wteamid, sep = '_'))
save(compact.results, file = 'data/working/compact_results.RData')
## create submissions template dataset from sample submissions file
pred_template <- read.csv('data/results/SampleSubmissionStage1.csv', stringsAsFactors = FALSE)
names(pred_template) <- tolower(names(pred_template))
save(pred_template, file = 'data/working/predictions_template.RData')
## create test dataset from list of competing teams
test.set <- read.csv('data/results/SampleSubmissionStage1.csv', stringsAsFactors = FALSE)
names(test.set) <- tolower(names(test.set))
f <- function(x, i) unlist(strsplit(x, "_"))[i]
test.set$season <- unlist(lapply(test.set$id, f, i = 1))
test.set$team1 <- unlist(lapply(test.set$id, f, i = 2))
test.set$team2 <- unlist(lapply(test.set$id, f, i = 3))
save(test.set, file = 'data/working/test_set.RData')
## Reginald Edwards
## CREATED: 01 March 2018
## MODIFIED: 09 March 2018
## DESCRIPTION: Add modeling features:
##  - team seeds
##  - upset indicator
##  - NCAA strength of schedule (SoS) ranking
###############################################################################
## Clear workspace
rm(list=ls())
gc()
###############################################################################
## Add features to training dataset
###############################################################################
## load training data (actual compact Tournament results)
load('data/working/compact_results.RData')
## compact.results
## Add team seeds and upset indicator variable
## Extract seed ranking (excluding division)
seeds <- read.csv("data/raw/NCAATourneySeeds.csv")
names(seeds) <- tolower(names(seeds))
seeds$nseed <- as.numeric(substr(seeds$seed,2,3))
save(seeds, file = "data/working/seeds.RData")
## merge winning team seed
compact.results <- merge(compact.results, seeds, by.x = c('wteamid', 'season'),
by.y = c('teamid', 'season'))
compact.results$wseed <- compact.results$seed
compact.results$wnseed <- compact.results$nseed
## remove unused variables
compact.results$seed <- NULL
compact.results$nseed <- NULL
## merge losing team seed
compact.results <- merge(compact.results, seeds, by.x = c('lteamid', 'season'),
by.y = c('teamid', 'season'))
compact.results$lseed <- compact.results$seed
compact.results$lnseed <- compact.results$nseed
## remove unused variables
compact.results$seed <- NULL
compact.results$nseed <- NULL
o <- order(compact.results$season, compact.results$wteamid)
compact.results <- compact.results[o, ]
compact.results$upset <- ifelse(compact.results$wnseed > compact.results$lnseed, 1, 0)
## Limit training dataset to [1985-2013]
train.set <- compact.results[which(compact.results$season <= 2013), ]
# compute y
f <- function(x, i) unlist(strsplit(x, "_"))[i]
train.set$team1 <- unlist(lapply(train.set$id, f, i = 2))
train.set$team2 <- unlist(lapply(train.set$id, f, i = 3))
train.set$y <- ifelse(train.set$team1 == train.set$wteamid, 1, 0)
train.set$y <- ifelse(train.set$team1 == train.set$wteamid, 1, 0)
## Add team seeds and upset indicator variable
## merge team seeds
train.set <- merge(train.set, seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
train.set$seed1 <- train.set$seed
train.set$nseed1 <- train.set$nseed
## remove unused variables
train.set$seed <- NULL
train.set$nseed <- NULL
X <- train.set
## merge team 2 seeds
train.set <- merge(train.set, seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
train.set$seed2 <- train.set$seed
train.set$nseed2 <- train.set$nseed
## remove unused variables
train.set$seed <- NULL
train.set$nseed <- NULL
train.set$seed1.lower <- ifelse(train.set$nseed1 < train.set$nseed2, 1, 0)
save(train.set, file = 'data/working/train_set.RData')
###############################################################################
## Add features to testing dataset
###############################################################################
## load test data
load('data/working/test_set.RData')
## Add team 1 seeds and upset indicator variable
test.set <- merge(test.set, seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
test.set$seed1 <- test.set$seed
test.set$nseed1 <- test.set$nseed
## delete unused variables
test.set$seed <- NULL
test.set$nseed <- NULL
## Add team 2 seeds and upset indicator variable
test.set <- merge(test.set, seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
test.set$seed2 <- test.set$seed
test.set$nseed2 <- test.set$nseed
## delete unused variables
test.set$seed <- NULL
test.set$nseed <- NULL
## create indicator for team 1 being lower seeded (i.e., better ranked) than team 2
test.set$seed1.lower <- ifelse(test.set$nseed1 < test.set$nseed2, 1, 0)
## rank teams by teamid
test.set <- test.set[order(test.set$id), ]
## save testing set data
save(test.set, file = 'data/working/test_set.RData')
## Regular season win-loss record
source('code/reg-season-win-probability.R')
###############################################################################
## NCAA strength of schedule (SoS) rankings
load('data/working/ncaa_sos.RData')
# ncaa.sos data frame
## Add to test set
#load("data/working/test_set.RData")
## Team 1 SOS
test.set <- merge(test.set, ncaa.sos, by.x = c('season', 'team1'), by.y = c('season', 'teamid'), all.x = TRUE)
test.set$sos.rank1 <- test.set$sos.rank
## delete unused variables
test.set$sos.rank <- NULL
test.set$record <- NULL
test.set$teamname <- NULL
## Team 2 SOS
test.set <- merge(test.set, ncaa.sos, by.x = c('season', 'team2'), by.y = c('season', 'teamid'), all.x = TRUE)
test.set$sos.rank2 <- test.set$sos.rank
## delete unused variables
test.set$sos.rank <- NULL
test.set$record <- NULL
test.set$teamname <- NULL
save(test.set, file="data/working/test_set.RData")
## Add to training set
#load("data/working/train_set.RData")
train.set <- merge(train.set, ncaa.sos, by.x = c('season', 'team1'), by.y = c('season', 'teamid'), all.x = TRUE)
train.set$sos.rank1 <- train.set$sos.rank
## delete unused variables
train.set$sos.rank <- NULL
train.set$record <- NULL
train.set$teamname <- NULL
## Team 2 SOS
train.set <- merge(train.set, ncaa.sos, by.x = c('season', 'team2'), by.y = c('season', 'teamid'), all.x = TRUE)
train.set$sos.rank2 <- train.set$sos.rank
## delete unused variables
train.set$sos.rank <- NULL
train.set$record <- NULL
train.set$teamname <- NULL
save(train.set, file="data/working/train_set.RData")
###############################################################################
## Scoring statistics
load("data/working/train_set.RData")
load("data/working/test_set.RData")
load("data/working/scoring_stats.RData")
train.set <- merge(train.set, scoring.stats, by.x = c("season", "team1"), by.y = c("season", "teamid"), all.x = TRUE)
test.set <- merge(test.set, scoring.stats, by.x = c("season", "team1"), by.y = c("season", "teamid"), all.x = TRUE)
save(test.set, file="data/working/test_set.RData")
save(train.set, file="data/working/train_set.RData")
## Reginald Edwards
## CREATED: 02 March 2018
## MODIFIED: 09 March 2018
## DESCRIPTION: run various models.
##  Features:
##    - seed
##    - reg season games played
##    - reg season win percentage
##    - NCAA strength of schedule (SoS)
###############################################################################
rm(list=ls())
gc()
load(file = 'data/working/train_set.RData')
load(file = 'data/working/test_set.RData')
source('code/log-loss-evaluation.R')
m5 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
avg.ppg + avg.opp.ppg + close.games + point.diff, data = train.set,
family = "binomial"); summary(m5)
summary(train.set)
## swap ppg for point diff
m5 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
close.games + point.diff, data = train.set,
family = "binomial"); summary(m5)
## swap ppg for point diff
m5 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
close.games + point.diff + close.games*point.diff, data = train.set,
family = "binomial"); summary(m5)
## swap ppg for point diff
m5 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
close.games + point.diff, data = train.set,
family = "binomial"); summary(m5)
train.set$pred <- predict(m5, train.set, type = "response")
train.set$pred <- pmax(pmin(0.999, train.set$pred), 0.001)
log.loss(train.set$y, train.set$pred)
test.set$pred <- predict(m5, test.set, type = "response")
test.set$pred <- pmax(pmin(0.999, test.set$pred), 0.001)
write.csv(test.set[,c('id','pred')], file = 'data/results/predictions-03102018-c.csv', row.names = FALSE, quote = FALSE)
logloss.evaluate('data/results/predictions-03102018-c.csv')
## keep ppg
m6 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
avg.ppg + avg.opp.ppg + close.games, data = train.set,
family = "binomial"); summary(m6)
train.set$pred <- predict(m6, train.set, type = "response")
train.set$pred <- pmax(pmin(0.999, train.set$pred), 0.001)
log.loss(train.set$y, train.set$pred)
test.set$pred <- predict(m6, test.set, type = "response")
test.set$pred <- pmax(pmin(0.999, test.set$pred), 0.001)
test.set$pred <- predict(m6, test.set, type = "response")
test.set$pred <- pmax(pmin(0.999, test.set$pred), 0.001)
write.csv(test.set[,c('id','pred')], file = 'data/results/predictions-03102018-d.csv', row.names = FALSE, quote = FALSE)
logloss.evaluate('data/results/predictions-03102018-d.csv')
m8 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
sos.rank1 + sos.rank2 + avg.ppg + avg.opp.ppg + close.games, data = train.set,
family = "binomial"); summary(m8)
train.set$pred <- predict(m7, train.set, type = "response")
train.set$pred <- pmax(pmin(0.999, train.set$pred), 0.001)
## excl SoS
train.set <- na.omit(train.set)
m8 <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 +
games2 + seed1.lower*win.pct1 + seed1.lower*win.pct2 + seed1.lower*wins1 +
seed1.lower*games1 + seed1.lower*wins2 + seed1.lower*games2 +
sos.rank1 + sos.rank2 + avg.ppg + avg.opp.ppg + close.games, data = train.set,
family = "binomial"); summary(m8)
train.set$pred <- predict(m8, train.set, type = "response")
train.set$pred <- pmax(pmin(0.999, train.set$pred), 0.001)
log.loss(train.set$y, train.set$pred)
test.set$pred <- predict(m7, test.set, type = "response")
test.set$pred <- predict(m8, test.set, type = "response")
test.set$pred <- pmax(pmin(0.999, test.set$pred), 0.001)
write.csv(test.set[,c('id','pred')], file = 'data/results/predictions-03102018-e.csv', row.names = FALSE, quote = FALSE)
logloss.evaluate('data/results/predictions-03102018-e.csv')
rm(list=ls())
rm(list=ls())
m1 <- read.csv('data/results/predictions-03102018-a.csv', stringsAsFactors = FALSE)
m2 <- read.csv('data/results/predictions-03102018-b.csv', stringsAsFactors = FALSE)
m3 <- read.csv('data/results/predictions-03102018-c.csv', stringsAsFactors = FALSE)
m4 <- read.csv('data/results/predictions-03102018-d.csv', stringsAsFactors = FALSE)
m5 <- read.csv('data/results/predictions-03102018-e.csv', stringsAsFactors = FALSE)
cor(m1$pred, m2$pred)
cor(m1$pred, m2$pred, m3$pred)
cor(c(m1$pred, m2$pred, m3$pred))
models.mat <- matrix(m1, m2$pred)
models.mat <- merge(m1, m2)
View(m1)
models.mat <- merge(m1, m2, by = "id")
View(models.mat)
models.mat <- merge(models.mat, m3, by = "id")
names(models.mat) <- c("id", "m1", "m2", "m3")
cor(models.mat)
cor(models.mat[,c("m1", "m2")])
cor(models.mat[,c("m1", "m2", "m3")])
rm(list=ls())
m1 <- read.csv('data/results/predictions-03102018-a.csv', stringsAsFactors = FALSE)
m2 <- read.csv('data/results/predictions-03102018-b.csv', stringsAsFactors = FALSE)
m3 <- read.csv('data/results/predictions-03102018-c.csv', stringsAsFactors = FALSE)
m4 <- read.csv('data/results/predictions-03102018-d.csv', stringsAsFactors = FALSE)
m5 <- read.csv('data/results/predictions-03102018-e.csv', stringsAsFactors = FALSE)
models.mat <- merge(m1, m2, by = "id")
models.mat <- merge(models.mat, m3, by = "id")
models.mat <- merge(models.mat, m4, by = "id")
models.mat <- merge(models.mat, m5, by = "id")
names(models.mat) <- c("id", "m1", "m2", "m3", "m4", "m5")
cor(models.mat[,c("m1", "m2", "m3", "m4", "m5")])
pred <- rowMeans(models.mat[,c("m1", "m2", "m3", "m4", "m5")])
## basic dumb ensemble
rm(list=ls())
source('code/log-loss-evaluation.R')
load(file = 'data/working/test_set.RData')
m1 <- read.csv('data/results/predictions-03102018-a.csv', stringsAsFactors = FALSE)
m2 <- read.csv('data/results/predictions-03102018-b.csv', stringsAsFactors = FALSE)
m3 <- read.csv('data/results/predictions-03102018-c.csv', stringsAsFactors = FALSE)
m4 <- read.csv('data/results/predictions-03102018-d.csv', stringsAsFactors = FALSE)
m5 <- read.csv('data/results/predictions-03102018-e.csv', stringsAsFactors = FALSE)
models.mat <- merge(m1, m2, by = "id")
models.mat <- merge(models.mat, m3, by = "id")
models.mat <- merge(models.mat, m4, by = "id")
models.mat <- merge(models.mat, m5, by = "id")
names(models.mat) <- c("id", "m1", "m2", "m3", "m4", "m5")
test.set$pred <- rowMeans(models.mat[,c("m1", "m2", "m3", "m4", "m5")])
test.set$pred <- pmax(pmin(0.999, test.set$pred), 0.001)
write.csv(test.set[,c('id','pred')], file = 'data/results/predictions-03102018-f.csv', row.names = FALSE, quote = FALSE)
logloss.evaluate('data/results/predictions-03102018-f.csv')
cor(models.mat[,c("m1", "m2", "m3", "m4", "m5")])
plot(density(models.mat$m1))
points(density(models.mat$m2))
lines(density(models.mat$m2))
plot(density(models.mat$m1))
lines(density(models.mat$m2))
lines(density(models.mat$m2))
lines(density(models.mat$m3))
lines(density(models.mat$m4))
lines(density(models.mat$m5))
plot(density(models.mat$m1))
lines(density(models.mat$m2))
lines(density(models.mat$m3))
lines(density(models.mat$m4))
lines(density(models.mat$m5))
plot(density(models.mat$m1))
lines(density(models.mat$m5))
test.set$pred <- rowMeans(models.mat[,c("m1", "m5")])
test.set$pred <- pmax(pmin(0.999, test.set$pred), 0.001)
write.csv(test.set[,c('id','pred')], file = 'data/results/predictions-03102018-f.csv', row.names = FALSE, quote = FALSE)
logloss.evaluate('data/results/predictions-03102018-f.csv')
summary(models.mat)
rm(list=ls())
m1 <- read.csv('data/results/predictions-03102018-a.csv', stringsAsFactors = FALSE)
m2 <- read.csv('data/results/predictions-03102018-b.csv', stringsAsFactors = FALSE)
m3 <- read.csv('data/results/predictions-03102018-c.csv', stringsAsFactors = FALSE)
m4 <- read.csv('data/results/predictions-03102018-d.csv', stringsAsFactors = FALSE)
m5 <- read.csv('data/results/predictions-03102018-e.csv', stringsAsFactors = FALSE)
models.mat <- merge(m1, m2, by = "id")
models.mat <- merge(models.mat, m3, by = "id")
models.mat <- merge(models.mat, m4, by = "id")
models.mat <- merge(models.mat, m5, by = "id")
names(models.mat) <- c("id", "m1", "m2", "m3", "m4", "m5")
cor(models.mat[,c("m1", "m2", "m3", "m4", "m5")])
plot(density(models.mat$m1))
lines(density(models.mat$m2))
lines(density(models.mat$m3))
lines(density(models.mat$m4))
lines(density(models.mat$m5))
summary(models.mat)
plot(density(models.mat$m1))
pred1 <- pmin(max.winprob, models.mat$m1)
max.winprob <- .99
lines(density(pred1))
pred1 <- pmin(max.winprob, models.mat$m1)
plot(density(models.mat$m1))
lines(density(pred1))
lines(density(pred1), col='red')
max.winprob <- .9
pred1 <- pmin(max.winprob, models.mat$m1)
plot(density(models.mat$m1))
lines(density(pred1), col='red')
max.winprob <- .8
pred1 <- pmin(max.winprob, models.mat$m1)
plot(density(models.mat$m1))
lines(density(pred1), col='red')
source('code/log-loss-evaluation.R')
a <- NULL
a
a != NULL
if(a) print(1)
length(a)
source('code/log-loss-evaluation.R')
pv <- models.mat[c("id", "m1")]
pv$pred <- pv$m1
logloss.evaluate("", pv)
View(pv)
source('code/log-loss-evaluation.R')
logloss.evaluate("", pv)
pv$pred <- pmin(max.winprob, models.mat$m1)
logloss.evaluate("", pv)
f <- function(x){
pv <- models.mat[c("id", "m1")]
pv$pred <- pmin(x, models.mat$m1)
logloss.evaluate("", pv)
}
f(max.winprob)
x <- f(seq(0,.99, .1))
x <- c()
for(i in seq(0,.99, .1)) x <- c(x, f(i))
plot(x)
for(i in seq(0.01,.99, .01)) x <- c(x, f(i))
plot(x)
x <- c()
for(i in seq(0.01,.99, .01)) x <- c(x, f(i))
plot(x, type='l')
i
f(i)
abline(h = 0.57)
max.winprob.list <- seq(0.01,.99, .01)
plot(max.winprob.list, x, type='l')
max.winprob.list <- seq(0.5,.99, .01)
for(i in max.winprob.list) x <- c(x, f(i))
max.winprob.list <- seq(0.5,.99, .01)
x <- c()
for(i in max.winprob.list) x <- c(x, f(i))
plot(max.winprob.list, x, type='l')
abline(h = 0.57)
max.winprob.list <- seq(0.75,.99, .01)
x <- c()
for(i in max.winprob.list) x <- c(x, f(i))
plot(max.winprob.list, x, type='l')
abline(h = 0.57)
x <- c()
min.winprob.list <- seq(0.01,.5, .01)
for(i in min.winprob.list) x <- c(x, f2(i))
f2 <- function(x){
pv <- models.mat[c("id", "m1")]
pv$pred <- pmax(x, models.mat$m1)
logloss.evaluate("", pv)
}
max.winprob.list <- seq(0.75,.99, .01)
min.winprob.list <- seq(0.01,.5, .01)
x <- c()
for(i in min.winprob.list) x <- c(x, f2(i))
plot(min.winprob.list, x, type='l')
