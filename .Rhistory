X.train$win.pct <- NULL
X.train[X.train$season == 1991 & X.train$lteamid == 1424, ]
X.train[X.train$season == 1991 & X.train$wteamid == 1424, ]
X.train[X.train$season == 2013 & X.train$lteamid == 1276, ]
X.train[X.train$season == 2013 & X.train$wteamid == 1276, ]
o<- order(X.train$season, X.train$daynum, X.train$wteamid)
X.train <- X.train[o, ]
X.train[X.train$season == 2013 & X.train$lteamid == 1276, ]
X.train[X.train$season == 2013 & X.train$wteamid == 1276, ]
X.train[X.train$season == 2013 & (X.train$wteamid == 1276 | X.train$lteamid == 1276), ]
source('code/log-loss-evaluation.R')
log.loss(X.train$y, X.train$pred)
X.train$pred <- X.train$wwin.pct
source('code/log-loss-evaluation.R')
log.loss(X.train$y, X.train$pred)
X.train$pred <- pmax(pmin(0.001, X.train$wwin.pct), 0.999)
X.train$pred <- pmax(pmin(0.001, X.train$wwin.pct), 0.999)
log.loss(X.train$y, X.train$pred)
X.train$pred <- pmax(pmin(0.999, X.train$wwin.pct), 0.001)
log.loss(X.train$y, X.train$pred)
m <- lm(upset ~ wwin.pct + lwin.pct, data = X.train); summary(m)
m <- glm(upset ~ wwin.pct + lwin.pct, data = X.train, family = "binomial"); summary(m)
pred <- predict(m, X.train)
log.loss(X.train$y, pred)
summary(pred)
?predict.glm
pred <- predict(m, X.train, type = "response")
summary(pred)
log.loss(X.train$y, pred)
hist(pred)
prob.upset
prob.upset <- predict(m, X.train, type = "response")
log.loss(X.train$y, prob.upset)
hist(prob.upset)
load('data/working/training.RData')
X.train <- merge(X.train, team.record, by.x = c('season', 'team1'), by.y = c('season', 'teamid'))
X.train$wins1 <- X.train$n.wins
X.train$losses1 <- X.train$n.losses
X.train$games1 <- X.train$games
X.train$win.pct1 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
X.train <- merge(X.train, team.record, by.x = c('season', 'lteamid'), by.y = c('season', 'teamid'))
load('data/working/training.RData')
X.train <- merge(X.train, team.record, by.x = c('season', 'team1'), by.y = c('season', 'teamid'))
X.train$wins1 <- X.train$n.wins
X.train$losses1 <- X.train$n.losses
X.train$games1 <- X.train$games
X.train$win.pct1 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
X.train <- merge(X.train, team.record, by.x = c('season', 'team2'), by.y = c('season', 'teamid'))
X.train$wins2 <- X.train$n.wins
X.train$losses2 <- X.train$n.losses
X.train$games2 <- X.train$games
X.train$win.pct2 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
o<- order(X.train$season, X.train$daynum, X.train$team1)
## Reginald Edwards
## CREATED: 1 March 2018
## MODIFIED:
## DESCRIPTION: Add modeling features
###############################################################################
rm(list=ls())
###############################################################################
## Add features to training dataset
###############################################################################
## load training data
load('data/working/results.RData')
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.res <- merge(X.res, X.seeds, by.x = c('wteamid', 'season'),
by.y = c('teamid', 'season'))
X.res$wseed <- X.res$seed
X.res$wnseed <- X.res$nseed
X.res$seed <- NULL
X.res$nseed <- NULL
X.res <- merge(X.res, X.seeds, by.x = c('lteamid', 'season'),
by.y = c('teamid', 'season'))
X.res$lseed <- X.res$seed
X.res$lnseed <- X.res$nseed
X.res$seed <- NULL
X.res$nseed <- NULL
o <- order(X.res$season, X.res$wteamid)
X.res <- X.res[o, ]
X.res$upset <- ifelse(X.res$wnseed > X.res$lnseed, 1, 0)
## Limit training dataset to [1985-2013]
o <- which(X.res$season <= 2013)
X.train <- X.res[o, ]
# compute y
f <- function(x, i) unlist(strsplit(x, "_"))[i]
X.train$team1 <- unlist(lapply(X.train$id, f, i = 2))
X.train$team2 <- unlist(lapply(X.train$id, f, i = 3))
X.train$y <- ifelse(X.train$team1 == X.train$wteamid, 1, 0)
X.train$y <- ifelse(X.train$team1 == X.train$wteamid, 1, 0)
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.train <- merge(X.train, X.seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
X.train$seed1 <- X.train$seed
X.train$nseed1 <- X.train$nseed
X.train$seed <- NULL
X.train$nseed <- NULL
X.train <- merge(X.train, X.seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
X.train$seed2 <- X.train$seed
X.train$nseed2 <- X.train$nseed
X.train$seed <- NULL
X.train$nseed <- NULL
save(X.train, file = 'data/working/training.RData')
###############################################################################
## Add features to testing dataset
###############################################################################
## load test data
load('data/working/testing.RData')
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.test <- merge(X.test, X.seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
X.test$seed1 <- X.test$seed
X.test$nseed1 <- X.test$nseed
X.test$seed <- NULL
X.test$nseed <- NULL
X.test <- merge(X.test, X.seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
X.test$seed2 <- X.test$seed
X.test$nseed2 <- X.test$nseed
X.test$seed <- NULL
X.test$nseed <- NULL
o <- order(X.test$id)
X.test <- X.test[o, ]
save(X.test, file = 'data/working/testing.RData')
load('data/working/training.RData')
X.train <- merge(X.train, team.record, by.x = c('season', 'wteamid'), by.y = c('season', 'teamid'))
X.train$wn.wins <- X.train$n.wins
X.train$wn.losses <- X.train$n.losses
X.train$wgames <- X.train$games
## Reginald Edwards
## CREATED: 1 March 2018
## MODIFIED:
## DESCRIPTION: Compute the probability regular season win percentages and use
## ase probability of tournament win
###############################################################################
rm(list=ls())
## load regular season results
X.season <- read.csv('data/raw/RegularSeasonCompactResults.csv',
stringsAsFactors = FALSE)
names(X.season) <- tolower(names(X.season))
X.season$game <- 1
wins <- aggregate(X.season$game, by = list(X.season$season, X.season$wteamid), FUN = sum)
names(wins) <- c('season', 'teamid', 'n.wins')
losses <- aggregate(X.season$game, by = list(X.season$season, X.season$lteamid), FUN = sum)
names(losses) <- c('season', 'teamid', 'n.losses')
team.record <- merge(wins, losses, all.x = TRUE, all.y = TRUE)
team.record$n.wins <- ifelse(is.na(team.record$n.wins), 0, team.record$n.wins)
team.record$n.losses <- ifelse(is.na(team.record$n.losses), 0, team.record$n.losses)
team.record$games <- team.record$n.wins + team.record$n.losses
team.record$win.pct <- team.record$n.wins/team.record$games
summary(team.record)
team.record[which(team.record$win.pct == 1),]
## Unbeaten in the regular season
## 1991, UNLV
## 2014 Wichitaw St
## 2015 Kentucky
load('data/working/training.RData')
X.train <- merge(X.train, team.record, by.x = c('season', 'wteamid'), by.y = c('season', 'teamid'))
X.train$wn.wins <- X.train$n.wins
X.train$wn.losses <- X.train$n.losses
X.train$wgames <- X.train$games
X.train$wwin.pct <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
X.train <- merge(X.train, team.record, by.x = c('season', 'lteamid'), by.y = c('season', 'teamid'))
X.train$ln.wins <- X.train$n.wins
X.train$ln.losses <- X.train$n.losses
X.train$lgames <- X.train$games
X.train$lwin.pct <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
o<- order(X.train$season, X.train$daynum, X.train$wteamid)
X.train <- X.train[o, ]
X.train[X.train$season == 2013 & (X.train$wteamid == 1276 | X.train$lteamid == 1276), ]
m <- glm(y ~ wwin.pct + lwin.pct, data = X.train, family = "binomial"); summary(m)
load('data/working/training.RData')
X.train <- merge(X.train, team.record, by.x = c('season', 'wteamid'), by.y = c('season', 'teamid'))
X.train$wins1 <- X.train$n.wins
X.train$losses1 <- X.train$n.losses
X.train$games1 <- X.train$games
X.train$win.pct1 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
X.train <- merge(X.train, team.record, by.x = c('season', 'lteamid'), by.y = c('season', 'teamid'))
X.train$wins2 <- X.train$n.wins
X.train$losses2 <- X.train$n.losses
X.train$games2 <- X.train$games
X.train$win.pct2 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
## load training data
load('data/working/training.RData')
X.train <- merge(X.train, team.record, by.x = c('season', 'team1'), by.y = c('season', 'teamid'))
X.train$wins1 <- X.train$n.wins
X.train$losses1 <- X.train$n.losses
X.train$games1 <- X.train$games
X.train$win.pct1 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
X.train <- merge(X.train, team.record, by.x = c('season', 'team2'), by.y = c('season', 'teamid'))
X.train$wins2 <- X.train$n.wins
X.train$losses2 <- X.train$n.losses
X.train$games2 <- X.train$games
X.train$win.pct2 <- X.train$win.pct
X.train$n.wins <- NULL
X.train$n.losses <- NULL
X.train$games <- NULL
X.train$win.pct <- NULL
o <- order(X.train$season, X.train$daynum, X.train$wteamid)
X.train <- X.train[o, ]
X.train[X.train$season == 2013 & (X.train$wteamid == 1276 | X.train$lteamid == 1276), ]
source('code/log-loss-evaluation.R')
X.train$pred <- pmax(pmin(0.999, X.train$win.pct1), 0.001)
log.loss(X.train$y, X.train$pred)
m <- glm(y ~ win.pct1 + win.pct2, data = X.train, family = "binomial"); summary(m)
pred <- predict(m, X.train, type = "response")
X.train$pred <- predict(m, X.train, type = "response")
X.train$pred <- pmax(pmin(0.999, X.train$win.pct1), 0.001)
log.loss(X.train$y, X.train$pred)
X.train$pred <- predict(m, X.train, type = "response")
X.train$pred <- pmax(pmin(0.999, X.train$pred), 0.001)
log.loss(X.train$y, X.train$pred)
m <- glm(y ~ win.pct1 + win.pct2 + wins1 + losses1 + games1 + games2, data = X.train, family = "binomial"); summary(m)
summary(X.train$games1)
cor(X.train[, c('games1', 'games2')])
cor(X.train[, c('games1', 'games2', 'wins1', 'losses1')])
m <- glm(y ~ win.pct1 + win.pct2 + wins1 + games1 + wins2 + games2, data = X.train, family = "binomial"); summary(m)
X.train$pred <- predict(m, X.train, type = "response")
X.train$pred <- pmax(pmin(0.999, X.train$pred), 0.001)
log.loss(X.train$y, X.train$pred)
cor(X.train[, c('wins.pct1', 'wins1', 'games1')])
cor(X.train[, c('win.pct1', 'wins1', 'games1')])
X.train$seed1.lower <- ifelse(X.train$nseed1 < X.train$nseed2, 1, 0)
m <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 + games2, data = X.train, family = "binomial"); summary(m)
X.train$pred <- predict(m, X.train, type = "response")
X.train$pred <- pmax(pmin(0.999, X.train$pred), 0.001)
log.loss(X.train$y, X.train$pred)
load('data/working/testing.RData')
names(X.test)
X.test <- merge(X.test, team.record, by.x = c('season', 'team1'), by.y = c('season', 'teamid'))
X.test$wins1 <- X.test$n.wins
X.test$losses1 <- X.test$n.losses
X.test$games1 <- X.test$games
X.test$win.pct1 <- X.test$win.pct
X.test$n.wins <- NULL
X.test$n.losses <- NULL
X.test$games <- NULL
X.test$win.pct <- NULL
X.test <- merge(X.test, team.record, by.x = c('season', 'team2'), by.y = c('season', 'teamid'))
X.test$wins2 <- X.test$n.wins
X.test$losses2 <- X.test$n.losses
X.test$games2 <- X.test$games
X.test$win.pct2 <- X.test$win.pct
X.test$n.wins <- NULL
X.test$n.losses <- NULL
X.test$games <- NULL
X.test$win.pct <- NULL
o <- order(X.test$season, X.test$daynum, X.test$wteamid)
o <- order(X.test$season, X.test$daynum, X.test$team1)
names(X.test)
o <- order(X.test$season, X.test$team1)
X.test <- X.test[o, ]
View(X.test)
save(X.test, file = 'data/working/testing.RData')
rm(list=ls())
source('code/log-loss-evaluation.R')
load(file = 'data/working/testing.RData')
load(file = 'data/working/training.RData')
m <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 + games2, data = X.train, family = "binomial"); summary(m)
## Reginald Edwards
## CREATED: 1 March 2018
## MODIFIED:
## DESCRIPTION: Prepare data for modeling. Some datasets have to be created at
## many points in the project, this script generates these datasets up front.
###############################################################################
rm(list=ls())
## load actual results
X.res <- read.csv('data/raw/NCAATourneyCompactResults.csv',
stringsAsFactors = FALSE)
names(X.res) <- tolower(names(X.res))
## transform actual results table into one comparable to the submissions table
X.res$id <- ifelse(X.res$wteamid < X.res$lteamid, paste(X.res$season,
X.res$wteamid, X.res$lteamid, sep = '_'), paste(X.res$season, X.res$lteamid,
X.res$wteamid, sep = '_'))
save(X.res, file = 'data/working/results.RData')
## create submissions template dataset
X.pred <- read.csv('data/results/SampleSubmissionStage1.csv', stringsAsFactors = FALSE)
names(X.pred) <- tolower(names(X.pred))
save(X.pred, file = 'data/working/predictions_template.RData')
## create test dataset from list of competing teams
X.test <- read.csv('data/results/SampleSubmissionStage1.csv', stringsAsFactors = FALSE)
names(X.test) <- tolower(names(X.test))
f <- function(x, i) unlist(strsplit(x, "_"))[i]
X.test$season <- unlist(lapply(X.test$id, f, i = 1))
X.test$team1 <- unlist(lapply(X.test$id, f, i = 2))
X.test$team2 <- unlist(lapply(X.test$id, f, i = 3))
save(X.test, file = 'data/working/testing.RData')
## Reginald Edwards
## CREATED: 1 March 2018
## MODIFIED:
## DESCRIPTION: Add modeling features
###############################################################################
rm(list=ls())
###############################################################################
## Add features to training dataset
###############################################################################
## load training data
load('data/working/results.RData')
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.res <- merge(X.res, X.seeds, by.x = c('wteamid', 'season'),
by.y = c('teamid', 'season'))
X.res$wseed <- X.res$seed
X.res$wnseed <- X.res$nseed
X.res$seed <- NULL
X.res$nseed <- NULL
X.res <- merge(X.res, X.seeds, by.x = c('lteamid', 'season'),
by.y = c('teamid', 'season'))
X.res$lseed <- X.res$seed
X.res$lnseed <- X.res$nseed
X.res$seed <- NULL
X.res$nseed <- NULL
o <- order(X.res$season, X.res$wteamid)
X.res <- X.res[o, ]
X.res$upset <- ifelse(X.res$wnseed > X.res$lnseed, 1, 0)
## Limit training dataset to [1985-2013]
o <- which(X.res$season <= 2013)
X.train <- X.res[o, ]
# compute y
f <- function(x, i) unlist(strsplit(x, "_"))[i]
X.train$team1 <- unlist(lapply(X.train$id, f, i = 2))
X.train$team2 <- unlist(lapply(X.train$id, f, i = 3))
X.train$y <- ifelse(X.train$team1 == X.train$wteamid, 1, 0)
X.train$y <- ifelse(X.train$team1 == X.train$wteamid, 1, 0)
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.train <- merge(X.train, X.seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
X.train$seed1 <- X.train$seed
X.train$nseed1 <- X.train$nseed
X.train$seed <- NULL
X.train$nseed <- NULL
X.train <- merge(X.train, X.seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
X.train$seed2 <- X.train$seed
X.train$nseed2 <- X.train$nseed
X.train$seed <- NULL
X.train$nseed <- NULL
X.train$seed1.lower <- ifelse(X.train$nseed1 < X.train$nseed2, 1, 0)
save(X.train, file = 'data/working/training.RData')
###############################################################################
## Add features to testing dataset
###############################################################################
## load test data
load('data/working/testing.RData')
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.test <- merge(X.test, X.seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
X.test$seed1 <- X.test$seed
X.test$nseed1 <- X.test$nseed
X.test$seed <- NULL
X.test$nseed <- NULL
X.test <- merge(X.test, X.seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
X.test$seed2 <- X.test$seed
X.test$nseed2 <- X.test$nseed
X.test$seed <- NULL
X.test$nseed <- NULL
o <- order(X.test$id)
X.test <- X.test[o, ]
save(X.test, file = 'data/working/testing.RData')
## Regular season win-loss record
source('code/reg-season-win-probability.R')
rm(list=ls())
load(file = 'data/working/training.RData')
load(file = 'data/working/testing.RData')
source('code/log-loss-evaluation.R')
m <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 + games2, data = X.train, family = "binomial"); summary(m)
X.train$pred <- predict(m, X.train, type = "response")
X.train$pred <- pmax(pmin(0.999, X.train$pred), 0.001)
log.loss(X.train$y, X.train$pred)
X.test$pred <- predict(m, X.test, type = "response")
X.test$seed1.lower <- ifelse(X.test$nseed1 < X.test$nseed2, 1, 0)
## Reginald Edwards
## CREATED: 1 March 2018
## MODIFIED:
## DESCRIPTION: Add modeling features
###############################################################################
rm(list=ls())
###############################################################################
## Add features to training dataset
###############################################################################
## load training data
load('data/working/results.RData')
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.res <- merge(X.res, X.seeds, by.x = c('wteamid', 'season'),
by.y = c('teamid', 'season'))
X.res$wseed <- X.res$seed
X.res$wnseed <- X.res$nseed
X.res$seed <- NULL
X.res$nseed <- NULL
X.res <- merge(X.res, X.seeds, by.x = c('lteamid', 'season'),
by.y = c('teamid', 'season'))
X.res$lseed <- X.res$seed
X.res$lnseed <- X.res$nseed
X.res$seed <- NULL
X.res$nseed <- NULL
o <- order(X.res$season, X.res$wteamid)
X.res <- X.res[o, ]
X.res$upset <- ifelse(X.res$wnseed > X.res$lnseed, 1, 0)
## Limit training dataset to [1985-2013]
o <- which(X.res$season <= 2013)
X.train <- X.res[o, ]
# compute y
f <- function(x, i) unlist(strsplit(x, "_"))[i]
X.train$team1 <- unlist(lapply(X.train$id, f, i = 2))
X.train$team2 <- unlist(lapply(X.train$id, f, i = 3))
X.train$y <- ifelse(X.train$team1 == X.train$wteamid, 1, 0)
X.train$y <- ifelse(X.train$team1 == X.train$wteamid, 1, 0)
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.train <- merge(X.train, X.seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
X.train$seed1 <- X.train$seed
X.train$nseed1 <- X.train$nseed
X.train$seed <- NULL
X.train$nseed <- NULL
X.train <- merge(X.train, X.seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
X.train$seed2 <- X.train$seed
X.train$nseed2 <- X.train$nseed
X.train$seed <- NULL
X.train$nseed <- NULL
X.train$seed1.lower <- ifelse(X.train$nseed1 < X.train$nseed2, 1, 0)
save(X.train, file = 'data/working/training.RData')
###############################################################################
## Add features to testing dataset
###############################################################################
## load test data
load('data/working/testing.RData')
## Add team seeds and upset indicator variable
## merge team seeds
load('data/working/seeds.RData')
X.test <- merge(X.test, X.seeds, by.x = c('team1', 'season'),
by.y = c('teamid', 'season'))
X.test$seed1 <- X.test$seed
X.test$nseed1 <- X.test$nseed
X.test$seed <- NULL
X.test$nseed <- NULL
X.test <- merge(X.test, X.seeds, by.x = c('team2', 'season'),
by.y = c('teamid', 'season'))
X.test$seed2 <- X.test$seed
X.test$nseed2 <- X.test$nseed
X.test$seed <- NULL
X.test$nseed <- NULL
X.test$seed1.lower <- ifelse(X.test$nseed1 < X.test$nseed2, 1, 0)
o <- order(X.test$id)
X.test <- X.test[o, ]
save(X.test, file = 'data/working/testing.RData')
## Regular season win-loss record
source('code/reg-season-win-probability.R')
rm(list=ls())
load(file = 'data/working/training.RData')
load(file = 'data/working/testing.RData')
source('code/log-loss-evaluation.R')
m <- glm(y ~ seed1.lower + win.pct1 + win.pct2 + wins1 + games1 + wins2 + games2, data = X.train, family = "binomial"); summary(m)
X.train$pred <- predict(m, X.train, type = "response")
X.train$pred <- pmax(pmin(0.999, X.train$pred), 0.001)
log.loss(X.train$y, X.train$pred)
X.test$pred <- predict(m, X.test, type = "response")
X.test$pred <- pmax(pmin(0.999, X.test$pred), 0.001)
log.loss(X.train$y, X.train$pred)
write.csv(X.test[,c('id','pred')], file = 'data/working/record_win_predictions.csv')
logloss.evaluate('data/working/record_win_predictions.csv')
write.csv(X.test[,c('id','pred')], file = 'data/working/record_win_predictions.csv', row.names = FALSE)
write.csv(X.test[,c('id','pred')], file = 'data/working/record_win_predictions.csv', row.names = FALSE, quote = FALSE)
logloss.evaluate('data/working/record_win_predictions.csv')
